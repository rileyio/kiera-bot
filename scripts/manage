#!/bin/bash -i
# Colors
RED='\033[0;31m'
SUCCESS='\033[0;32m'
PRIMARY='\033[0;34m'
PURPLE='\033[0;35m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NONE='\033[0m'

MODE="dev"
INSPECTEDMODE="unknown"

FIRSTPROMPT=true

# Kiera Pod Variables
#  -1 = Unknown
#   0 = Checking..
#   1 = Running
#   2 = Not Running
#   3 = No Container Found
#   4 = Errored
PODSTATUS=-1
# When Running
# Pod ID
PODID=""
# Status Indicator Dot
PODSTATUSDOT=""

echo "ü™Ñ  kiera-bot management script"
echo "=============================="

function statusDot() {
  if [ $PODSTATUS == 0 ]; then PODSTATUSDOT="${NONE}‚¶ø${NONE}"; fi
  if [ $PODSTATUS == 1 ]; then PODSTATUSDOT="${SUCCESS}‚¶ø${NONE}"; fi
  if [ $PODSTATUS == 2 ]; then PODSTATUSDOT="${YELLOW}‚¶ø${NONE}"; fi
  if [ $PODSTATUS == 3 ]; then PODSTATUSDOT="${CYAN}‚¶ø${NONE}"; fi
  if [ $PODSTATUS == 4 ]; then PODSTATUSDOT="${RED}‚¶ø${NONE}"; fi
}

# Check Status of Container and set corresponding variables
function getStatus() {
  # Use -a to get all containers including stopped
  PODID="$(podman ps -a | grep "kiera-bot" | cut -d ' ' -f1)"

  # Exists check
  if [ -z "$PODID" ]; then
    # No container from check
    PODSTATUS=3
  else
    PODSTATUS=0
  fi

  # echo "$(podman inspect ${PODID} -f {{.State.Status}}) ${PODSTATUS}"

  # Check if pod is running
  if [ $PODSTATUS == 0 ]; then
    if [ "$(podman inspect ${PODID} -f {{.State.Status}})" == "running" ]; then
      PODSTATUS=1
    fi
  else
    PODSTATUS=3
  fi

  # Set Status Dot for Prompts
  statusDot
}

# Check if kiera-bot's image exists and return 0 if it does, 1 if it doesn't
function isImageExists() {
  name=$(podman images | grep "kiera-bot" | cut -d ' ' -f1)
  if [ -z "$name" ]; then
    return 1
  else
    return 0
  fi
}

# Remove kiera-bot's image
function removeImage() {
  echo "  üóëÔ∏è  Removing kiera-bot image..."
  make rm | sed 's/^/  /'
}

# Get kiera-bot's NODE_ENV
function getMode() {
  # Don't check mode if no container exists
  if [ $PODSTATUS == 3 ]; then return; fi

  UNPARSEDINSPECTEDMODE=$(
    podman inspect $(podman ps -a | grep "kiera-bot" | cut -d ' ' -f1) -f {{.Config.Env}} | grep -q "NODE_ENV=production"
    echo $?
  )

  if [ $UNPARSEDINSPECTEDMODE == 0 ]; then
    INSPECTEDMODE="prod"
  else
    INSPECTEDMODE="dev"
  fi
}

# Usage help response if user passes invalid argument, the usage param, or no argument
function usage() {
  clear
  echo "ü™Ñ  kiera-bot management script"
  echo "=============================="
  echo -e "${NONE}Usage: [start|stop|restart|status|clean|log|tail] [dev|prod]"
  # exit 0
  prompt
}

function prompt() {
  getStatus

  # Clear screen if first prompt is `false`
  echo -e "${PURPLE}------------------------------------------------------------"

  echo -e -n "  ${PODSTATUSDOT} ${PURPLE}Kiera ${PRIMARY}>${YELLOW} "
  read -a a
  echo -e "${NONE}"

  # Parse 2nd argument (if passed, for later usage)
  if [ -n "$a[1]" ]; then
    case "${a[1]}" in
    "dev") MODE="dev" ;;
    "prod") MODE="prod" ;;
    *) MODE="dev" ;;
    esac
  fi

  case $a in
  "start") start ;;
  "stop") stop ;;
  "status") status ;;
  "restart") restart ;;
  "clean") clean ;;
  "log") log ;;
  "tail") tail ;;
  "exit") exit ;;
  *) echo "  $ Not Valid" ;;
  esac

  # if [ $FIRSTPROMPT == false ]; then echo -e "${NONE}"; fi

  # Set first promopt to false to clear after each command afterwards
  FIRSTPROMPT=false
  prompt
}

# Restart kiera-bot
function restart() {
  echo "  Restarting kiera-bot..."
  make down | sed 's/^/  /'
  make up | sed 's/^/  /'
}

# Return kiera-bot status in the terminal
function status() {
  # Check current running mode
  getMode
  getStatus

  echo "  üîé Checking kiera-bot status..."

  if [ $PODSTATUS == 3 ]; then echo -e "  ${CYAN}- ${NONE} kiera-bot container does ${RED}not ${NONE}exist"; fi
  if [ $PODSTATUS == 2 ]; then echo -e "  ${RED}ÔΩò${NONE} kiera-bot is ${RED}not running"; fi
  if [ $PODSTATUS == 1 ]; then echo -e "  ${SUCCESS}‚úì${NONE} kiera-bot is ${SUCCESS}running${NONE} ‚Üí ${PRIMARY}${id} ${NONE}‚ùñ  mode:${PURPLE}${INSPECTEDMODE}"; fi
}

# Start kiera-bot
function start() {
  # Check current running status
  getStatus

  # If mode is prod, then execute the prod script
  if [ "$MODE" == "prod" ]; then
    if [ $PODSTATUS == 1 ]; then echo -e "    ${SUCCESS}‚úì${NONE} kiera-bot is ${SUCCESS}already running"; fi

    # Stop Kiera if it's running
    stop

    # If the image exists, then remove it
    if isImageExists; then
      removeImage
    fi

    echo "  üíº Starting kiera-bot in production mode..."
    make up-prod | sed 's/^/  /'
    status

    return
  fi

  echo "  üëæ Starting kiera-bot in dev mode..."
  if [ $PODSTATUS == 1 ]; then echo -e "    ${SUCCESS}‚úì${NONE} kiera-bot is ${SUCCESS}already running"; fi

  make up | sed 's/^/  /'
}

function stop() {
  if [ $PODSTATUS != 1 ]; then
    echo -e "  ${RED}ÔΩò${NONE} kiera-bot is ${RED}not running"
  else
    echo "  üõë Stopping kiera-bot..."
    make down | sed 's/^/  /'
  fi
}

# Perform a clean install of kiera-bot's image & container
function clean() {
  # If Kiera is running, then stop it
  if [ $PODSTATUS == 1 ]; then
    stop
  fi

  # If the image exists, then remove it
  if isImageExists; then
    removeImage
  fi

  # Start Kiera (prod mode)
  if [ "$MODE" == "prod" ]; then
    echo "üíº Starting kiera-bot in production mode..."
    make up-prod | sed 's/^/  /'
    status
    exit 0
  fi

  echo "üëæ Starting kiera-bot in dev mode..."
  start | sed 's/^/  /'

  # Check if start was successful
  status
}

# Start the live logs
function log() {
  echo "  üì∫ Live logs for (tail 1000) kiera-bot..."
  podman logs -f --tail 1000 $(podman ps -a | grep "kiera-bot" | cut -d ' ' -f1)
}

# Start the live logs (tail)
function tail() {
  echo "  üì∫ Live logs (tail 100) for kiera-bot..."
  podman logs -f --tail 100 $(podman ps -a | grep "kiera-bot" | cut -d ' ' -f1)
}

# Parse 2nd argument (if passed, for later usage)
if [ -n "$2" ]; then
  case "$2" in
  "dev") MODE="dev" ;;
  "prod") MODE="prod" ;;
  *) MODE="dev" ;;
  esac
fi

# Parse 1st argument
case "$1" in
"start") start ;;
"stop") stop ;;
"status") status ;;
"restart") restart ;;
"clean") clean ;;
"log") log ;;
"tail") tail ;;
*) usage ;;
esac
