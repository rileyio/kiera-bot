import * as Utils from '@/utils'
import * as Discord from 'discord.js'
import { SlashCommandBuilder } from '@discordjs/builders'
import { TrackedUser } from '@/objects/user/'
import { RouterRouted, ExportRoutes } from '@/router'

/**
 * Verify Discord <-> ChastiKey account
 * @export
 * @param {RouterRouted} routed
 */
export async function verify(routed: RouterRouted) {
  // Statuses
  var isSuccessful = false
  var isNotSuccessfulReason = 'Unknown, Try again later.'

  // User not previously registered with Kiera
  if (!routed.user._id) {
    // Create a record for them like !register would have
    routed.user = new TrackedUser({ id: routed.author.id })
    // Add to DB
    await routed.bot.DB.add('users', routed.user)
  }

  const parsedVerifyDiscordID = await routed.bot.Service.ChastiKey.verifyCKAccountCheck({ discordID: routed.author.id })
  console.log(routed.user.ChastiKey)

  // If user exists & this command is being re-run, try checking if they're verified on the ChastiKey side before
  // Triggering a new verify
  if (!routed.user.ChastiKey.isVerified) {
    // When they are already verified, let them know & update the ChastiKey user record
    if (parsedVerifyDiscordID.status === 200) {
      // Update that we know they're at least verified
      routed.user.ChastiKey.isVerified = true
      routed.user.ChastiKey.username = parsedVerifyDiscordID.username

      await routed.bot.DB.update('users', { id: routed.author.id }, routed.user)
      // We can safely stop here - let the user know nothing more is needed at this time
      await routed.reply(routed.$render('ChastiKey.Verify.FastForward'))
      return true // Stop here
    }
  }

  if (parsedVerifyDiscordID.status === 200) {
    await routed.reply(routed.$render('ChastiKey.Verify.PreviouslyCompleted'))
    return true
  }

  const verifyResponse = await routed.bot.Service.ChastiKey.verifyCKAccountGetCode(routed.author.id, routed.author.username, routed.author.discriminator)

  if (verifyResponse.success) {
    isSuccessful = true
    // Track User's verification code
    routed.user.ChastiKey.verificationCode = verifyResponse.code
    // Commit Verify code to db, to have on hand
    await routed.bot.DB.update('users', { id: routed.author.id }, routed.user)
  } else {
    isNotSuccessfulReason = verifyResponse.reason || isNotSuccessfulReason
  }

  if (isSuccessful) {
    const QRImgStream = await Utils.ChastiKey.generateVerifyQR(routed.user.ChastiKey.verificationCode)
    // Let user know in a reply to check their DMs
    // await routed.reply(routed.$render('ChastiKey.Verify.CkeckYourDMs'))
    // Send QR Code via DM
    await routed.reply(
      {
        files: [new Discord.MessageAttachment(QRImgStream, 'QRVerify.png')],
        embeds: [
          {
            title: `ChastiKey - User Verification`,
            description: routed.$render('ChastiKey.Verify.DMInstructions'),
            color: 9125611,
            timestamp: new Date(),
            footer: {
              iconURL: 'https://cdn.discordapp.com/app-icons/526039977247899649/41251d23f9bea07f51e895bc3c5c0b6d.png',
              text: 'QR Generated by Kiera'
            }
          }
        ]
      },
      true
    )
  } else {
    // Generate & DM QR code to requestor
    await routed.reply(routed.$render('ChastiKey.Verify.NotSuccessfulUsingReason', { reason: isNotSuccessfulReason }), true)
  }

  // Successful end
  return true
}
